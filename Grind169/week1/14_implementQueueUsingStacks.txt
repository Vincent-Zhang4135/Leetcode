# Key thing to realize: if we place an item in a stack, and pop it into another stack,
# we reverse the order and so the 2nd stack behaves like a queue. However, one concern
# is that if you have pushes in between pops, the order gets messed up. To fix this, 
# we want to add everything from the push stack onto the pop stack only when the pop stack
# is EMPTY

from collections import deque
class MyQueue:
    def __init__(self):
        self.push_stack = deque()
        self.pop_stack = deque()
        
    def move_push_to_pop_stack(self, push_stack, pop_stack):
        for i in range(len(push_stack)):
            item = push_stack.pop()
            pop_stack.append(item)

    def push(self, x: int) -> None:
        self.push_stack.append(x)
        
    def pop(self) -> int:
        if not self.pop_stack:
            self.move_push_to_pop_stack(self.push_stack, self.pop_stack)

        return self.pop_stack.pop()

    def peek(self) -> int:
        if not self.pop_stack:
            self.move_push_to_pop_stack(self.push_stack, self.pop_stack)

        return self.pop_stack[-1]

    def empty(self) -> bool:
        return not self.push_stack and not self.pop_stack


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()