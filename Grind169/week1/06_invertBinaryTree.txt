# first attempt
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        # If there is a leaf node, we can just return it
        if not root.left and not root.right:
            return root
        elif not root.left:
            left_child = invertTree(root.right)
            root.left = left_child
            root.right = None
            return root
        elif not root.right:
            right_child = invertTree(root.left)
            root.right = right_child
            root.left = None
            return root
        else:
            left_child = invertTree(root.right)
            right_child = invertTree(root.left)

            root.left = left_child
            root.right = right_child
            return root


# 2nd attempt
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        else:
            left_child = self.invertTree(root.right)
            right_child = self.invertTree(root.left)

            root.left = left_child
            root.right = right_child
            return root

# testcases
# root: [2, 1, 3]
# output: [2, 3, 1]

# root; [1, 2, 3, 4, 5, 6, 7]
# output: [1, 3, 2, 7, 6, 5, 4]