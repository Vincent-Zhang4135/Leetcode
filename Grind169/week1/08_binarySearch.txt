# Naive aproach
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        for i, num in enumerate(nums):
            if num == target:
                return i
        return -1

# O(logn) using binar search
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2 
            # another way to write this is mid = l + (r - l) // 2
            # this prevents overflow!!!
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                l = mid + 1
            else:
                r = mid - 1

        return -1

# testcases
# [5], target = 5
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] target = 8
# [0, 1, 2, 3] target = 0
# [0, 1, 2, 3] target = 3
# [0, 1, 2] target = 0
# [0, 1, 2] target = 2