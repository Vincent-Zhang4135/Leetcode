# THIS DOESN'T WORK LOL: Greedy Solution with converging pointers
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:  
        curr_sum = sum(nums)

        max_sum = 0

        l, r = 0. len(nums) - 1

        while l <= r:
            if nums[l] < nums[r]:
                curr_sum -= nums[l]  
                l += 1
            else:
                curr_sum -= nums[r]
                r -= 1
            
            max_sum = max(max_sum, curr_sum)
        
        return max_sum

# Divide and Conquer
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        def 

# Dynamic Programming with Kadane's Algorithm
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = float('-inf')
        currSum = 0
        for i in range(len(nums)):
            currSum += nums[i]
            maxSum = max(maxSum, currSum)

            if currSum < 0:
                currSum = 0
        
        return maxSum
        
# Another interpretation of DP with Kadane's Algothim
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = float('-inf')
        currSum = 0
        
        return max(maxSubarray(nums[:len(nums)-1]) )

# Two pointer Smart Sliding Window
class Solution:
    def maxSubArray(self, nums: List[int]) -> int: