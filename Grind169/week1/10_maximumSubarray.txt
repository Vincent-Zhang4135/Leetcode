# THIS DOESN'T WORK LOL: Greedy Solution with converging pointers
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:  
        curr_sum = sum(nums)

        max_sum = 0

        l, r = 0. len(nums) - 1

        while l <= r:
            if nums[l] < nums[r]:
                curr_sum -= nums[l]  
                l += 1
            else:
                curr_sum -= nums[r]
                r -= 1
            
            max_sum = max(max_sum, curr_sum)
        
        return max_sum

# Divide and Conquer
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        def maxCrossingSum(arr, l, m, h):
            # Include elements on left of mid.
            sm = 0
            left_sum = -10000
        
            for i in range(m, l-1, -1):
                sm = sm + arr[i]
        
                if (sm > left_sum):
                    left_sum = sm
        
            # Include elements on right of mid
            sm = 0
            right_sum = -1000
            for i in range(m + 1, h + 1):
                sm = sm + arr[i]
        
                if (sm > right_sum):
                    right_sum = sm
  
            return max(left_sum + right_sum, left_sum, right_sum)

        def maxSubArraySum(arr, l, h):
        
            # Base Case: Only one element
            if (l == h):
                return arr[l]

            m = (l + h) // 2

            return max(maxSubArraySum(arr, l, m),
                    maxSubArraySum(arr, m+1, h),
                    maxCrossingSum(arr, l, m, h))

        return maxSubArraySum(nums, 0, len(nums) - 1)


# Dynamic Programming with Kadane's Algorithm
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = float('-inf')
        currSum = 0
        for i in range(len(nums)):
            currSum += nums[i]
            maxSum = max(maxSum, currSum)

            if currSum < 0:
                currSum = 0
        
        return maxSum
        
# Another interpretation of DP with Kadane's Algothim
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]

        curr = nums[-1]
        return max(maxSubarray(nums[:len(nums)-1]) + curr, curr)

# testcases
# [3, 4, -64, 4, 3, 2]
# [2]
# [-10, -11, -12, -9]
