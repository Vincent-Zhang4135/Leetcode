# O(nlogn) solution (bad)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        nums = sorted(nums)
        prev = 0
        for num in nums:
            if num == prev: return num
            prev = num


# O(n) using Floyd's Algorithm, utilizing the values to point to indices
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        fast, slow = 0, 0
        slow = nums[slow]
        fast = nums[nums[fast]]
        while fast != slow:
            slow = nums[slow]
            fast = nums[nums[fast]]


        p = 0
        q = slow
        while p != q:
            p = nums[p]
            q = nums[q]

        return p


# another write up
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0, 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]

            if slow == fast:
                finder = 0
                while finder != slow:
                    finder = nums[finder]
                    slow = nums[slow]
                return finder

 0  1  2  3  4
[1, 3, 4, 2, 2]