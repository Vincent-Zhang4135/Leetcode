# recursive decision tree
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool: 
        def remove_prefix(s, word):
            print(s)
            if len(s) > len(word) and s[:len(word)] == word:
                return s[len(word):]

            return "#" # i will use # to indicate false

        def dfs(s, wd):
            suffix = remove_prefix(s, wd)
            if suffix == "":
                return True
            elif suffix == "#":
                return False

            for word in wordDict:
                if dfs(suffix, word):
                    return True

            return False

        return dfs(s, "")

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def check_suffix(word, i):
            if len(word) > i:
                return False
            if s[i - len(word): i] == word:
                return True

        dp = [False for _ in range(len(s) + 1)]
        dp[0] = True
        for i in range(1, len(s) + 1):
            for word in wordDict:
                if check_suffix(word, i) and dp[i - len(word)]:
                    dp[i] = True
                    break
        return dp[len(s)]

0123456789
 apple pen

        