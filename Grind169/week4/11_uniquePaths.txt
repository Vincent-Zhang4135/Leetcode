class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        if m <= 1 or n <= 1:
            return 1

        dp = [[0] * m] for _ in range(n)]
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1

        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i -1][j] + dp[i][j - 1]

        return dp[-1][-1]

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        def fact(n):
            res = 1
            while n:
                res *=n
                n -= 1
            return res

        downs = m - 1
        rights = n - 1

        return int(fact(downs + rights) / (fact(rights) * fact(downs)))


[1, 1, 1, 1, 1, 1, 1]
[1, 2, 3, 4, 5, 6, 7]
[1, 3, 6, 10, 15, 21, 0]

[]
[1]
[1, 1, 1, 1, 1, 1,]
[[1],
 [1],
 [1]]

 2x2

 2d
 8r

 drrdrdrrrr
 drrdrdrrrr
 rrrrrrrrrr

 8C2 
 8 * 7 / 2
  28