# this doesn't work because we could be adding the same number 
# twice
import functools
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        sum = functiools.reduce(lambda a,b: a + b)
        if not sum % 2:
            return False
        partition_sum = sum / 2

        dp = [False] * partition_sum
        dp[0] = True

        for i in range(len(dp)):
            for num in nums:
                if num <= partition_sum and dp[i - num]:
                    dp[i] = True
        
        return dp[partition_sum]

# instead, we should think of the problem more aligned with what a natural
# decision tree would look like. Instead of looping through all of the nums
# and add it to our current dp. We need to find a way to create a new dp that matches 
# what the actual solutions so far are

import functools
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        sm = sum(nums)
        if sm % 2:
            return False
        partition_sum = sm // 2

        dp = set()
        dp.add(0)

        for i in range(len(nums)):
            new_dp = set()
            for partial_sum in dp:
                new_dp.add(partial_sum + nums[i])
                new_dp.add(partial_sum)
            dp = new_dp
        
        return partition_sum in dp
