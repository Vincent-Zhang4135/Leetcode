
# utilizing a visited set
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        m, n = len(board), len(board[0])
        visited = set()

        def dfs(row, col, i):
            if i == len(word):
                return True

            if 0 <= row < m and 0 <= col < n and board[row][col] == word[i] and (row, col) not in visited:
                visited.add((row, col))
                for dx, dy in directions:
                    if dfs(row + dx, col + dy, i + 1):
                        return True
                visited.remove((row,col))
                
            return False

        for i in range(m):
            for j in range(n):
                if dfs(i, j, 0):
                    return True

        return False

# utilizing the matrix itself
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        m, n = len(board), len(board[0])
        
        def dfs(row, col, i):
            if i == len(word):
                return True

            
            if 0 <= row < m and 0 <= col < n and board[row][col] == word[i]:
                board[row][col] = "#"
                for dx, dy in directions:
                    if dfs(row + dx, col + dy, i + 1):
                        return True
                board[row][col] = word[i]
                
            return False

        for i in range(m):
            for j in range(n):
                if dfs(i, j, 0):
                    return True

        return False