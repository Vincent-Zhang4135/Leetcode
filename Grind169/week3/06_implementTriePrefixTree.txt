class TrieNode:
    def __init__(self):
        self.children = {}
        self.endOfWord = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        trie = self.root
        for char in word:
            if char not in trie.children:
                trie.children[char] = TrieNode()
            
            trie = trie.children[char]

        trie.endOfWord = True

    def search(self, word: str) -> bool:
        trie = self.root
        for char in word:
            if char not in trie.children:
                return False

            trie = trie.children[char]

        return trie.endOfWord

    def startsWith(self, prefix: str) -> bool:
        trie = self.root
        for char in prefix:
            if char not in trie.children:
                return False

            trie = trie.children[char]

        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)

                false
         { a            b  c}  app

         true
      { p    n }             pp

   { p    e }   { t }            p

  true   true   true
  l           


e
true
