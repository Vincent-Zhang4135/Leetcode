# this solution doesn't pass all test cases
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        def operate(x, y, operation):
            x, y = int(x), int(y)
            if operation == "+":
                return str(x + y)
            elif operation == "-":
                return str(x - y)
            elif operation == "*":
                return str(x * y)
            else: # should be //
                return str(x // y)

        valid_operations = {"+", "-", "*", "/"}
        
        while len(tokens) - 1:
            # find first operation
            op_ind = 2
            while tokens[op_ind] not in valid_operations:
                op_ind += 1

            # calculate operation
            token = operate(tokens[op_ind - 2], tokens[op_ind - 1], tokens[op_ind])
            tokens = tokens[:op_ind - 2] + [token] + tokens[op_ind + 1:]

        return tokens[0]

# Utilizing a stack DS
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:

        def operate(x, y, operation):
            x, y = int(x), int(y)
            if operation == "+":
                return str(x + y)
            elif operation == "-":
                return str(x - y)
            elif operation == "*":
                return str(x * y)
            else: # should be //
                return str(int(x / y))

        stack = deque()
        valid_operations = {"+", "-", "*", "/"}
        for i in range(len(tokens)):
            if tokens[i] in valid_operations:
                op2 = stack.pop()
                op1 = stack.pop()

                stack.append(operate(op1, op2, tokens[i]))
            else:
                stack.append(tokens[i])

        return stack.pop()


[2, 1, +  3 *]
+, -, *, and /