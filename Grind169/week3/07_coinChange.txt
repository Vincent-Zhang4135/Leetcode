# naive not working solution
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        coins.sort(reverse=True)

        num_coins = 0
        for denom in coins:
            num_coins += (amount // denom)
            amount %= denom

        return num_coins if num_coins and not amount else -1

# DP solution
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        subprobs = {}
        maxi = amount + 1
        def dp(amount):
            if amount < 0:
                return maxi

            if amount == 0:
                return 0
            
            if amount in subprobs:
                return subprobs[amount]
            
            for coin in coins:
                subprob = amount - coin
                if not subprob in subprobs:
                    subprobs[subprob] = dp(subprob)

            return 1 + min(subprobs[amount - coin] for coin in coins)

        res = dp(amount)
        if res >= maxi:
            return -1
        return res

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        minCoin = min(coins)
        
        maxi = amount + 1
        solutions = [maxi for _ in range(amount + 1)]
        solutions[0] = 0
        for amt in range(1, len(solutions)):
            if amt < minCoin:
                continue
            solutions[amt] = 1 + min(solutions[amt - coin] for coin in coins if (amt - coin >= 0))
            

        if solutions[-1] >= maxi:
            return -1
        return solutions[-1]



{

}
11
           [20, 5, 3, 1]

                            11                                   + 1
  -9(12)                 6(min(2,...))               8                     10    
              -14(-1)   1(1)        3(3)     5
                       (0)        0(0)  2(2)
                                        1 (1)
                                      0(0)












[20, 5, 3, 1]
