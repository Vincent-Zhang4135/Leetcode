# logical DFS
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        def createGraph():
            graph = {i:[] for i in range(numCourses)}
            for prereq in prerequisites:
                graph[prereq[0]].append(prereq[1])

            return graph

        graph = createGraph()
        visited = set()
        def dfs(course):
            # either a course has no prerequisites, or
            # we have already shown that it can have all its prereqs met
            if not graph[course]:
                return True
            
            if course in visited:
                return False
            
            visited.add(course)

            # if any of them lead to a loop, then return False
            for prereq in graph[course]:
                if not dfs(prereq):
                    return False

            # if we all neighbors are completable courses, then
            # our current course is also completeable, so set it to []
            # and also remove from visited as a way to backtrack that dfs
            # so that the next dfs call we make will be correctly updated
            graph[course] = []
            visited.remove(course)
            return True

        for course in range(numCourses):
            if not dfs(course):
                return False
        
        return True


# better DFS
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = {crs:[] for crs in range(numCourses)}
        for crs,prereq in prerequisites:
            graph[crs].append(prereq)

        visited = set()
        def dfs(crs):
            if crs in visited:
                return False

            if graph[crs] == []:
                return True

            visited.add(crs)
            for prereq in graph[crs]:
                if not dfs(prereq):
                    return False

            visited.remove(crs)
            graph[crs] = []
            return True


        for crs in range(numCourses):
            if not dfs(crs):
                return False

        return True 
{       
    0: [1. 3]
    1: [2]
    2: []
    3: []
}
{0, }
0 -> 1 -> 2
  -> 3
          -> 1
0 -> 1 -> 2 -> 0

{
    0: [1]
    1: [2]
    2: [0]
}


# topological sort




