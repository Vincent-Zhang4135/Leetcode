# my solution
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        visited = set()
        currLen = 0
        maxLen = 0

        l, r = 0, 0

        while r < len(s):
            if s[r] in visited:
                while s[l] != s[r]:
                    currLen -= 1
                    visited.remove(s[l])
                    l += 1
                l += 1

            else:
                currLen += 1
                maxLen = max(maxLen, currLen)
                visited.add(s[r])

            r += 1

        return maxLen

# prettier Solution
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        visited = set()
        l = 0
        ret = 0
        for r in range(len(s)):
            while s[r] in visited:
                visited.remove(s[l])
                l += 1

            visited.add(s[r])
            ret = max(ret, r - l + 1)

        return ret

currLen = 3
maxLen = 3

set = {a, b, c}
V
   V
abca

-----------------------
end
 V
start
 V
"efabcabcbb"
-----------------

currLen = 1
maxLen = 1

set = {a}
  V
   V
aaa