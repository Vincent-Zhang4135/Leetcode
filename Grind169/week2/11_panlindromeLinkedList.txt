# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        arr = []

        while head:
            arr.append(head.val)
            head = head.next

        l = 0
        r = len(arr) - 1

        while l <= r:
            if arr[l] != arr[r]: return False
            l += 1
            r -= 1

        return True

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        def lengthPalidrome(head):
            length = 0
            while head:
                length += 1
                head = head.next
                
            return length
        
        length = lengthPalidrome(head)
        if length < 2:
            return True
        
        slow, fast = head, head
        prev = None
        while fast and fast.next:
            fast = fast.next.next
            tmp = slow.next
            slow.next = prev
            prev = slow
            slow = tmp

        
        if length % 2: slow = slow.next

        # tmp is the head of left list
        # slow is the head of right list 

        while prev and slow:
            if prev.val != slow.val: return False

            prev = prev.next
            slow = slow.next
            
        if bool(slow) ^ bool(prev):
            return False

        return True

# iterate one time to see how long the list is, and a second time to 
# check if it is a Palindrome
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        len = 0
        curr = head
        while curr:
            len += 1
            curr = curr.next

        stack = deque()

        curr = head
        for _ in range(len // 2):
            stack.append(curr.val)
            curr = curr.next

        if (len % 2): curr = curr.next
        
        for _ in range(len // 2):
            if curr.val != stack.pop(): return False
            curr = curr.next

        return True
